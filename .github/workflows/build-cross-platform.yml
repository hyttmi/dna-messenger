name: Cross-Platform Build

on:
  push:
    branches: [ main, develop, feature/cross-compile ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux-x64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc g++ libssl-dev libpq-dev libjson-c-dev qtbase5-dev qtmultimedia5-dev
      
      - name: Build Linux x64
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
      
      - name: Package Linux x64
        run: |
          mkdir -p dist/linux-x64
          cp build/dna_messenger dist/linux-x64/
          cp build/gui/dna_messenger_gui dist/linux-x64/ || true
          cd dist
          tar -czf dna-messenger-linux-x64.tar.gz linux-x64/
      
      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dna-messenger-linux-x64
          path: dist/dna-messenger-linux-x64.tar.gz

  build-linux-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cross-compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      - name: Install ARM64 libraries
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev:arm64 \
            libpq-dev:arm64 \
            libjson-c-dev:arm64
      
      - name: Build Linux ARM64
        run: |
          mkdir -p build
          cd build
          cat > toolchain-arm64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=toolchain-arm64.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_GUI=OFF
          make -j$(nproc)
      
      - name: Package Linux ARM64
        run: |
          mkdir -p dist/linux-arm64
          cp build/dna_messenger dist/linux-arm64/
          cd dist
          tar -czf dna-messenger-linux-arm64.tar.gz linux-arm64/
      
      - name: Upload Linux ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dna-messenger-linux-arm64
          path: dist/dna-messenger-linux-arm64.tar.gz

  build-windows-x64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install MinGW toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake mingw-w64 wine wine64
      
      - name: Build Windows x64
        run: |
          mkdir -p build
          cd build
          cat > toolchain-mingw64.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR x86_64)
          set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
          set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
          set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
          set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          set(WIN32 TRUE)
          set(MINGW TRUE)
          EOF
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw64.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_GUI=OFF
          make -j$(nproc)
      
      - name: Package Windows x64
        run: |
          mkdir -p dist/windows-x64
          cp build/dna_messenger.exe dist/windows-x64/ || cp build/dna_messenger dist/windows-x64/dna_messenger.exe
          cd dist
          zip -r dna-messenger-windows-x64.zip windows-x64/
      
      - name: Upload Windows x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dna-messenger-windows-x64
          path: dist/dna-messenger-windows-x64.zip

  build-macos-x64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install cmake openssl postgresql json-c qt@5
      
      - name: Build macOS x64
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DQt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5
          make -j$(sysctl -n hw.ncpu)
      
      - name: Package macOS x64
        run: |
          mkdir -p dist/macos-x64
          cp build/dna_messenger dist/macos-x64/
          cp build/gui/dna_messenger_gui dist/macos-x64/ || true
          cd dist
          tar -czf dna-messenger-macos-x64.tar.gz macos-x64/
      
      - name: Upload macOS x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dna-messenger-macos-x64
          path: dist/dna-messenger-macos-x64.tar.gz

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install cmake openssl postgresql json-c qt@5
      
      - name: Build macOS ARM64
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DQt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5
          make -j$(sysctl -n hw.ncpu)
      
      - name: Package macOS ARM64
        run: |
          mkdir -p dist/macos-arm64
          cp build/dna_messenger dist/macos-arm64/
          cp build/gui/dna_messenger_gui dist/macos-arm64/ || true
          cd dist
          tar -czf dna-messenger-macos-arm64.tar.gz macos-arm64/
      
      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dna-messenger-macos-arm64
          path: dist/dna-messenger-macos-arm64.tar.gz

  create-release:
    needs: [build-linux-x64, build-linux-arm64, build-windows-x64, build-macos-x64, build-macos-arm64]
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dna-messenger-linux-x64/dna-messenger-linux-x64.tar.gz
            artifacts/dna-messenger-linux-arm64/dna-messenger-linux-arm64.tar.gz
            artifacts/dna-messenger-windows-x64/dna-messenger-windows-x64.zip
            artifacts/dna-messenger-macos-x64/dna-messenger-macos-x64.tar.gz
            artifacts/dna-messenger-macos-arm64/dna-messenger-macos-arm64.tar.gz
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
